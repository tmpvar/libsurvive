// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REMOTEHID_REMOTEHID_H_
#define FLATBUFFERS_GENERATED_REMOTEHID_REMOTEHID_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace RemoteHID {

struct v3;

struct v2;

struct quat;

struct PayloadLog;
struct PayloadLogBuilder;

struct PayloadFullState;
struct PayloadFullStateBuilder;

struct Packet;
struct PacketBuilder;

enum DeviceType : uint16_t {
  DeviceType_None = 0,
  DeviceType_Pointer = 1,
  DeviceType_SixDOF = 2,
  DeviceType_ButtonGrid = 3,
  DeviceType_MIN = DeviceType_None,
  DeviceType_MAX = DeviceType_ButtonGrid
};

inline const DeviceType (&EnumValuesDeviceType())[4] {
  static const DeviceType values[] = {
    DeviceType_None,
    DeviceType_Pointer,
    DeviceType_SixDOF,
    DeviceType_ButtonGrid
  };
  return values;
}

inline const char * const *EnumNamesDeviceType() {
  static const char * const names[5] = {
    "None",
    "Pointer",
    "SixDOF",
    "ButtonGrid",
    nullptr
  };
  return names;
}

inline const char *EnumNameDeviceType(DeviceType e) {
  if (flatbuffers::IsOutRange(e, DeviceType_None, DeviceType_ButtonGrid)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDeviceType()[index];
}

enum Payloads : uint8_t {
  Payloads_NONE = 0,
  Payloads_PayloadLog = 1,
  Payloads_PayloadFullState = 2,
  Payloads_MIN = Payloads_NONE,
  Payloads_MAX = Payloads_PayloadFullState
};

inline const Payloads (&EnumValuesPayloads())[3] {
  static const Payloads values[] = {
    Payloads_NONE,
    Payloads_PayloadLog,
    Payloads_PayloadFullState
  };
  return values;
}

inline const char * const *EnumNamesPayloads() {
  static const char * const names[4] = {
    "NONE",
    "PayloadLog",
    "PayloadFullState",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayloads(Payloads e) {
  if (flatbuffers::IsOutRange(e, Payloads_NONE, Payloads_PayloadFullState)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayloads()[index];
}

template<typename T> struct PayloadsTraits {
  static const Payloads enum_value = Payloads_NONE;
};

template<> struct PayloadsTraits<RemoteHID::PayloadLog> {
  static const Payloads enum_value = Payloads_PayloadLog;
};

template<> struct PayloadsTraits<RemoteHID::PayloadFullState> {
  static const Payloads enum_value = Payloads_PayloadFullState;
};

bool VerifyPayloads(flatbuffers::Verifier &verifier, const void *obj, Payloads type);
bool VerifyPayloadsVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) v3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  v3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  v3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(v3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) v2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  v2()
      : x_(0),
        y_(0) {
  }
  v2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(v2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) quat FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  quat()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  quat(float _x, float _y, float _z, float _w)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        w_(flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(quat, 16);

struct PayloadLog FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PayloadLogBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG = 4
  };
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct PayloadLogBuilder {
  typedef PayloadLog Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(PayloadLog::VT_MSG, msg);
  }
  explicit PayloadLogBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PayloadLog> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PayloadLog>(end);
    return o;
  }
};

inline flatbuffers::Offset<PayloadLog> CreatePayloadLog(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  PayloadLogBuilder builder_(_fbb);
  builder_.add_msg(msg);
  return builder_.Finish();
}

inline flatbuffers::Offset<PayloadLog> CreatePayloadLogDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *msg = nullptr) {
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return RemoteHID::CreatePayloadLog(
      _fbb,
      msg__);
}

struct PayloadFullState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PayloadFullStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_ROT = 6,
    VT_BUTTON_MASKS = 8,
    VT_ANALOGS = 10,
    VT_JOYSTICKS = 12
  };
  const RemoteHID::v3 *pos() const {
    return GetStruct<const RemoteHID::v3 *>(VT_POS);
  }
  const RemoteHID::quat *rot() const {
    return GetStruct<const RemoteHID::quat *>(VT_ROT);
  }
  const flatbuffers::Vector<uint32_t> *button_masks() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_BUTTON_MASKS);
  }
  const flatbuffers::Vector<float> *analogs() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_ANALOGS);
  }
  const flatbuffers::Vector<const RemoteHID::v2 *> *joysticks() const {
    return GetPointer<const flatbuffers::Vector<const RemoteHID::v2 *> *>(VT_JOYSTICKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<RemoteHID::v3>(verifier, VT_POS, 4) &&
           VerifyField<RemoteHID::quat>(verifier, VT_ROT, 4) &&
           VerifyOffset(verifier, VT_BUTTON_MASKS) &&
           verifier.VerifyVector(button_masks()) &&
           VerifyOffset(verifier, VT_ANALOGS) &&
           verifier.VerifyVector(analogs()) &&
           VerifyOffset(verifier, VT_JOYSTICKS) &&
           verifier.VerifyVector(joysticks()) &&
           verifier.EndTable();
  }
};

struct PayloadFullStateBuilder {
  typedef PayloadFullState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const RemoteHID::v3 *pos) {
    fbb_.AddStruct(PayloadFullState::VT_POS, pos);
  }
  void add_rot(const RemoteHID::quat *rot) {
    fbb_.AddStruct(PayloadFullState::VT_ROT, rot);
  }
  void add_button_masks(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> button_masks) {
    fbb_.AddOffset(PayloadFullState::VT_BUTTON_MASKS, button_masks);
  }
  void add_analogs(flatbuffers::Offset<flatbuffers::Vector<float>> analogs) {
    fbb_.AddOffset(PayloadFullState::VT_ANALOGS, analogs);
  }
  void add_joysticks(flatbuffers::Offset<flatbuffers::Vector<const RemoteHID::v2 *>> joysticks) {
    fbb_.AddOffset(PayloadFullState::VT_JOYSTICKS, joysticks);
  }
  explicit PayloadFullStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PayloadFullState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PayloadFullState>(end);
    return o;
  }
};

inline flatbuffers::Offset<PayloadFullState> CreatePayloadFullState(
    flatbuffers::FlatBufferBuilder &_fbb,
    const RemoteHID::v3 *pos = nullptr,
    const RemoteHID::quat *rot = nullptr,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> button_masks = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> analogs = 0,
    flatbuffers::Offset<flatbuffers::Vector<const RemoteHID::v2 *>> joysticks = 0) {
  PayloadFullStateBuilder builder_(_fbb);
  builder_.add_joysticks(joysticks);
  builder_.add_analogs(analogs);
  builder_.add_button_masks(button_masks);
  builder_.add_rot(rot);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<PayloadFullState> CreatePayloadFullStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const RemoteHID::v3 *pos = nullptr,
    const RemoteHID::quat *rot = nullptr,
    const std::vector<uint32_t> *button_masks = nullptr,
    const std::vector<float> *analogs = nullptr,
    const std::vector<RemoteHID::v2> *joysticks = nullptr) {
  auto button_masks__ = button_masks ? _fbb.CreateVector<uint32_t>(*button_masks) : 0;
  auto analogs__ = analogs ? _fbb.CreateVector<float>(*analogs) : 0;
  auto joysticks__ = joysticks ? _fbb.CreateVectorOfStructs<RemoteHID::v2>(*joysticks) : 0;
  return RemoteHID::CreatePayloadFullState(
      _fbb,
      pos,
      rot,
      button_masks__,
      analogs__,
      joysticks__);
}

struct Packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVICE_TYPE = 4,
    VT_DEVICE_ID = 6,
    VT_PAYLOAD_TYPE = 8,
    VT_PAYLOAD = 10
  };
  RemoteHID::DeviceType device_type() const {
    return static_cast<RemoteHID::DeviceType>(GetField<uint16_t>(VT_DEVICE_TYPE, 0));
  }
  uint64_t device_id() const {
    return GetField<uint64_t>(VT_DEVICE_ID, 0);
  }
  RemoteHID::Payloads payload_type() const {
    return static_cast<RemoteHID::Payloads>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const RemoteHID::PayloadLog *payload_as_PayloadLog() const {
    return payload_type() == RemoteHID::Payloads_PayloadLog ? static_cast<const RemoteHID::PayloadLog *>(payload()) : nullptr;
  }
  const RemoteHID::PayloadFullState *payload_as_PayloadFullState() const {
    return payload_type() == RemoteHID::Payloads_PayloadFullState ? static_cast<const RemoteHID::PayloadFullState *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_DEVICE_TYPE, 2) &&
           VerifyField<uint64_t>(verifier, VT_DEVICE_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayloads(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RemoteHID::PayloadLog *Packet::payload_as<RemoteHID::PayloadLog>() const {
  return payload_as_PayloadLog();
}

template<> inline const RemoteHID::PayloadFullState *Packet::payload_as<RemoteHID::PayloadFullState>() const {
  return payload_as_PayloadFullState();
}

struct PacketBuilder {
  typedef Packet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_device_type(RemoteHID::DeviceType device_type) {
    fbb_.AddElement<uint16_t>(Packet::VT_DEVICE_TYPE, static_cast<uint16_t>(device_type), 0);
  }
  void add_device_id(uint64_t device_id) {
    fbb_.AddElement<uint64_t>(Packet::VT_DEVICE_ID, device_id, 0);
  }
  void add_payload_type(RemoteHID::Payloads payload_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Packet::VT_PAYLOAD, payload);
  }
  explicit PacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Packet> CreatePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    RemoteHID::DeviceType device_type = RemoteHID::DeviceType_None,
    uint64_t device_id = 0,
    RemoteHID::Payloads payload_type = RemoteHID::Payloads_NONE,
    flatbuffers::Offset<void> payload = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_device_id(device_id);
  builder_.add_payload(payload);
  builder_.add_device_type(device_type);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyPayloads(flatbuffers::Verifier &verifier, const void *obj, Payloads type) {
  switch (type) {
    case Payloads_NONE: {
      return true;
    }
    case Payloads_PayloadLog: {
      auto ptr = reinterpret_cast<const RemoteHID::PayloadLog *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payloads_PayloadFullState: {
      auto ptr = reinterpret_cast<const RemoteHID::PayloadFullState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPayloadsVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayloads(
        verifier,  values->Get(i), types->GetEnum<Payloads>(i))) {
      return false;
    }
  }
  return true;
}

inline const RemoteHID::Packet *GetPacket(const void *buf) {
  return flatbuffers::GetRoot<RemoteHID::Packet>(buf);
}

inline const RemoteHID::Packet *GetSizePrefixedPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<RemoteHID::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RemoteHID::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RemoteHID::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RemoteHID::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RemoteHID::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RemoteHID

#endif  // FLATBUFFERS_GENERATED_REMOTEHID_REMOTEHID_H_
